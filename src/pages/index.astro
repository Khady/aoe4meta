---
const pageTitle = 'AOE4 Strategy Guide Helper';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <style>
      :root {
        color-scheme: dark;
        font-family: "Inter", system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
        background: radial-gradient(circle at top, #0f172a, #020617 55%);
        color: #f8fafc;
        min-height: 100%;
      }

      body {
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
        padding: 3rem 1.5rem 4rem;
      }

      header {
        text-align: center;
        max-width: 680px;
      }

      h1 {
        margin: 0;
        font-size: clamp(2.5rem, 5vw, 3.5rem);
        letter-spacing: 0.05em;
      }

      p.description {
        margin-top: 0.75rem;
        color: rgba(226, 232, 240, 0.85);
        line-height: 1.6;
        font-size: 1.05rem;
      }

      form {
        width: min(640px, 100%);
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 0.75rem;
        background: rgba(15, 23, 42, 0.8);
        padding: 1rem;
        border-radius: 0.85rem;
        box-shadow: 0 18px 45px rgba(15, 23, 42, 0.45);
        border: 1px solid rgba(148, 163, 184, 0.18);
      }

      form label {
        display: flex;
        flex-direction: column;
        gap: 0.35rem;
        font-weight: 600;
        letter-spacing: 0.02em;
        grid-column: span 2;
      }

      form input[type="text"] {
        padding: 0.75rem 1rem;
        border-radius: 0.65rem;
        border: 1px solid rgba(148, 163, 184, 0.35);
        background: rgba(15, 23, 42, 0.65);
        color: inherit;
        font-size: 1rem;
        outline: none;
        transition: border-color 0.2s ease;
      }

      form input[type="text"]:focus {
        border-color: #38bdf8;
        box-shadow: 0 0 0 2px rgba(14, 165, 233, 0.25);
      }

      form button {
        grid-column: 2;
        align-self: center;
        padding: 0.75rem 1.5rem;
        border-radius: 0.65rem;
        border: none;
        background: linear-gradient(135deg, #22d3ee, #6366f1);
        color: white;
        font-weight: 700;
        font-size: 1rem;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      form button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
      }

      form button:not(:disabled):hover {
        transform: translateY(-1px);
        box-shadow: 0 14px 28px rgba(14, 165, 233, 0.35);
      }

      .status {
        min-height: 1.5rem;
        text-align: center;
        color: #facc15;
        font-weight: 500;
      }

      .details {
        display: grid;
        gap: 1.25rem;
        width: min(960px, 100%);
      }

      .detail-card {
        background: rgba(15, 23, 42, 0.75);
        border: 1px solid rgba(148, 163, 184, 0.2);
        border-radius: 0.85rem;
        padding: 1.25rem 1.35rem;
        display: grid;
        gap: 0.35rem;
      }

      .detail-card span {
        color: rgba(148, 163, 184, 0.95);
        font-size: 0.95rem;
        text-transform: uppercase;
        letter-spacing: 0.08em;
      }

      .detail-card strong {
        font-size: 1.35rem;
      }

      .guides {
        display: grid;
        width: min(1100px, 100%);
        gap: 1.5rem;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
      }

      .guide-card {
        background: rgba(15, 23, 42, 0.78);
        border: 1px solid rgba(148, 163, 184, 0.15);
        border-radius: 1rem;
        padding: 1.5rem;
        display: grid;
        gap: 0.65rem;
        box-shadow: 0 18px 42px rgba(15, 23, 42, 0.35);
      }

      .guide-card h3 {
        margin: 0;
        font-size: 1.25rem;
      }

      .guide-card p {
        margin: 0;
        color: rgba(226, 232, 240, 0.9);
        line-height: 1.5;
      }

      @media (max-width: 640px) {
        form {
          grid-template-columns: 1fr;
        }

        form button {
          grid-column: 1;
        }
      }
    </style>
  </head>
  <body>
    <header>
      <h1>{pageTitle}</h1>
      <p class="description">
        Enter an Age of Empires IV username to instantly pull their most recent ranked match
        and generate tailored build guides for the civilizations and map involved in that game.
      </p>
    </header>

    <form id="player-form">
      <label for="username">Search player</label>
      <input
        type="text"
        id="username"
        name="username"
        placeholder="e.g. faye-chan"
        autocomplete="off"
        required
      />
      <button type="submit">Find Guides</button>
    </form>

    <div class="status" id="status" role="status" aria-live="polite"></div>

    <section class="details" id="details" hidden>
      <article class="detail-card">
        <span>Your Civilization</span>
        <strong id="player-civ">—</strong>
      </article>
      <article class="detail-card">
        <span>Opponent Civilization</span>
        <strong id="opponent-civ">—</strong>
      </article>
      <article class="detail-card">
        <span>Map</span>
        <strong id="map-name">—</strong>
      </article>
    </section>

    <section class="guides" id="guides" hidden></section>

    <script type="module">
      const form = document.getElementById('player-form');
      const status = document.getElementById('status');
      const detailsSection = document.getElementById('details');
      const guidesSection = document.getElementById('guides');
      const playerCivEl = document.getElementById('player-civ');
      const opponentCivEl = document.getElementById('opponent-civ');
      const mapNameEl = document.getElementById('map-name');

      const formatName = (value) => {
        if (!value) return 'Unknown';
        if (typeof value === 'string') {
          return value
            .replace(/[-_]/g, ' ')
            .replace(/\b\w/g, (char) => char.toUpperCase());
        }
        if (typeof value === 'object') {
          return formatName(value.name || value.id);
        }
        return String(value);
      };

      const buildGuideSuggestions = (playerCiv, opponentCiv, mapName) => {
        const safePlayer = formatName(playerCiv);
        const safeOpponent = formatName(opponentCiv);
        const safeMap = formatName(mapName);

        return [
          {
            title: `${safePlayer} vs ${safeOpponent} Build Order`,
            body: `Open with a flexible build tailored to counter ${safeOpponent} timings. Focus on scouting early pressure and adjust your economic balance to stay ahead.`,
          },
          {
            title: `${safeMap} Game Plan`,
            body: `Control key resources and sacred sites on ${safeMap}. Place production near the contested areas and secure strategic positions with outposts.`,
          },
          {
            title: `${safePlayer} Mid-Game Priorities`,
            body: `Transition into your core ${safePlayer} power spikes. Mix in units that punish ${safeOpponent} tech paths and maintain map vision with scouts or monks.`,
          },
        ];
      };

      const renderGuides = (guides) => {
        guidesSection.innerHTML = '';
        guides.forEach((guide) => {
          const card = document.createElement('article');
          card.className = 'guide-card';
          card.innerHTML = `<h3>${guide.title}</h3><p>${guide.body}</p>`;
          guidesSection.appendChild(card);
        });
      };

      const setStatus = (message, isError = false) => {
        status.textContent = message;
        status.style.color = isError ? '#f87171' : '#facc15';
      };

      const getPlayerId = async (username) => {
        const url = `https://aoe4world.com/api/v0/players/autocomplete?leaderboard=rm_1v1&query=${encodeURIComponent(
          username
        )}`;
        const request = {
          cache: 'no-store',
          headers: {
            Accept: 'application/json',
            'Cache-Control': 'no-cache',
            Pragma: 'no-cache',
          },
        };

        let response = await fetch(url, request);
        if (response.status === 304) {
          response = await fetch(url, { ...request, cache: 'reload' });
        }
        if (!response.ok) {
          throw new Error('Failed to look up player.');
        }

        const results = await response.json();

        if (!Array.isArray(results) || results.length === 0) {
          throw new Error('No players found with that username.');
        }
        const lower = username.trim().toLowerCase();
        const exactMatch = results.find((entry) => entry.name?.toLowerCase() === lower);
        return String(exactMatch?.id ?? results[0].id);
      };

      const getLastGame = async (playerId) => {
        const response = await fetch(
          `https://aoe4world.com/api/v0/players/${playerId}/games/last`
        );
        if (!response.ok) {
          throw new Error('Failed to load last game.');
        }
        return response.json();
      };

      const resolveCivilizations = (game, playerId) => {
        const players = game?.players || game?.match?.players || [];
        if (!Array.isArray(players) || players.length === 0) {
          return { playerCivilization: null, opponentCivilization: null };
        }

        const target = players.find((entry) => String(entry.profile_id) === String(playerId)) ||
          players.find((entry) => String(entry.player_id) === String(playerId));

        if (!target) {
          return { playerCivilization: null, opponentCivilization: null };
        }

        const opponent = players.find((entry) => {
          if (entry === target) return false;
          if (entry.team != null && target.team != null) {
            return entry.team !== target.team;
          }
          return true;
        });

        return {
          playerCivilization: target.civilization || target.civilization_id || target.civ,
          opponentCivilization: opponent?.civilization || opponent?.civilization_id || opponent?.civ,
        };
      };

      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);
        const username = (formData.get('username') || '').toString().trim();

        if (!username) {
          setStatus('Enter a username to search.', true);
          return;
        }

        setStatus('Looking up player…');
        form.querySelector('button').disabled = true;
        detailsSection.hidden = true;
        guidesSection.hidden = true;

        try {
          const playerId = await getPlayerId(username);
          setStatus('Fetching last game…');
          const lastGame = await getLastGame(playerId);

          const mapName =
            formatName(lastGame?.map?.name) ||
            formatName(lastGame?.map) ||
            formatName(lastGame?.match?.map?.name) ||
            'Unknown Map';
          const { playerCivilization, opponentCivilization } = resolveCivilizations(lastGame, playerId);

          playerCivEl.textContent = formatName(playerCivilization);
          opponentCivEl.textContent = formatName(opponentCivilization);
          mapNameEl.textContent = mapName;

          const guides = buildGuideSuggestions(playerCivilization, opponentCivilization, mapName);
          renderGuides(guides);

          detailsSection.hidden = false;
          guidesSection.hidden = false;
          setStatus('Latest match loaded!');
        } catch (error) {
          console.error(error);
          setStatus(error.message || 'Something went wrong. Please try again.', true);
        } finally {
          form.querySelector('button').disabled = false;
        }
      });
    </script>
  </body>
</html>
